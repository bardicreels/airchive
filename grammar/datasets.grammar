// Note: this is an MVP of Scroll Datasets for initial experimentation and to test the syntax. Few features are implemented yet.

valueCell
 highlightScope comment

measureTypeCell
 extends enumCell
 enum string int bool url uid float enum

conceptStartParser
 crux ::
 description Begins a concept.
 extends abstractCommentParser
 javascript
  compile() {
   return `<hr>`
  }

measureNameCell
 highlightScope keyword

measurementParser
 description Add a measurement to a concept. Also used for defining measures.
 cells measureNameCell
 pattern ^[a-zA-Z0-9_]+:( |$)
 catchAllCellType valueCell
 extends abstractCommentParser
 javascript
  compile() {
   return `<div>${Utils.linkify(this.getLine())}</div>`
  }
 example
  ::
  id: earth
  order: 3

printDatasetParser
 description Print the dataset in a page into an HTML table.
 cruxFromId
 extends abstractCommentParser
 javascript
   compile() {
   // A hacky but simple way to do this for now.
   const node = this.appendSibling("table \t", this.parent.file.makeDataset("tsv"))
   const html = node.compile()
   node.destroy()
   return html
   }

writeDatasetParser
 cruxFromId
 description Write a dataset file to disk.
 extends abstractCommandParser

printTableParser
 description Print a tabular table in a page into an HTML table.
 cruxFromId
 extends abstractScrollParser
 javascript
   compile() {
    const node = this.appendSibling("table \t", this.tsv)
    const html = node.compile()
    node.destroy()
    return html
   }
   getTableByIndex(index) {
      const hit = this.root.file.tables[parseInt(index)]
      if (!hit)
        console.error(`Table "${index}" not found`)
      return hit
   }
   get table() {
     const index = this.getWord(1)
     if (index !== undefined)
        return this.getTableByIndex(index)
     if (this.next.isTabularData)
       return this.next
     if (this.previous.isTabularData)
       return this.previous.headerNode
    return this.getTableByIndex(0)
   }
   get tsv() {
     const firstNode = this.table
    let tableNode = firstNode
    let tsv = tableNode.getLine()
    while (tableNode.next.isTabularData) {
      tsv += "\n" + tableNode.next.getLine()
      tableNode = tableNode.next
      if (tableNode === firstNode)
        break
    }
     return tsv
   }
   compileTextVersion() {
     return this.tsv
   }

tabularDataParser
 description Root lines with tabs are parsed as tsv data and printed as tables.
 cells anyCell
 pattern \t
 catchAllCellType anyCell
 extends abstractCommentParser
 javascript
  compileTextVersion() {
    return ""
  }
  get headerNode() {
    return this.isFirst ? this : this.previous.headerNode
  }
  compile() {
    return ""
  }
  get isFirst() {
    return !this.previous.isTabularData
  }
  isTabularData = true
 example
  // The below lines will print a table
  printTable
  Index	Name
  1	Thermos
