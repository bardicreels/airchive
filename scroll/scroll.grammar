anyCell
blankCell
dashCell
 highlightScope constant.language
codeCell
 highlightScope comment
keywordCell
 highlightScope keyword
textCell
 highlightScope string
urlCell
 highlightScope constant.language
errorNode
 baseNodeType errorNode
dumbdownNode
 extensions dd dumbdown
 description A prefix Tree Language that compiles to HTML. An alternative to Markdown.
 root
 inScope abstractTopLevelNode blankLineNode
 catchAllNodeType quickParagraphNode
 compilesTo html
 example
  title Hello world
  subtitle This is dumbdown
  
  paragraph It compiles to HTML. Blank lines get turned into brs.
  link https://treenotation.org dumbdown is a Tree Language.
  list
   - It has lists
   - Too!
  code
   // You can add code as well.
   print("Hello world")
abstractTopLevelNode
 abstract
 cells keywordCell
linkNode
 cells keywordCell urlCell
 catchAllCellType textCell
 extends abstractTopLevelNode
 compiler
  stringTemplate <a href="{urlCell}">{textCell}</a>
 crux link
paragraphNode
 inScope linkNode
 catchAllCellType textCell
 extends abstractTopLevelNode
 compiler
  stringTemplate <p>{textCell}</p>
 crux paragraph
codeNode
 description A code block.
 catchAllNodeType lineOfCodeNode
 extends abstractTopLevelNode
 todo Fix spacing
 compiler
  openChildren <div class="scrollArticleCode">
  closeChildren </div>
  stringTemplate 
 crux code
listNode
 inScope dashNode
 extends abstractTopLevelNode
 compiler
  stringTemplate 
  openChildren <ul>
  closeChildren </ul>
 crux list
blankLineNode
 description Blank lines compile to nothing in the HTML.
 cells blankCell
 compiler
  stringTemplate 
 pattern ^$
 tags doNotSynthesize
lineOfCodeNode
 catchAllCellType codeCell
 catchAllNodeType lineOfCodeNode
 compiler
  stringTemplate <code>{codeCell}</code>
dashNode
 crux -
 catchAllCellType textCell
 compiler
  stringTemplate <li>{textCell}</li>
 cells dashCell
dateCell
 highlightScope string
titleNode
 catchAllCellType textCell
 extends abstractTopLevelNode
 compiler
  stringTemplate 
 crux title
 javascript
  compile(spaces) {
   const title = this.getContent()
   const permalink = jtree.Utils.stringToPermalink(this.getContent())
   return `<h1 id="${permalink}"><a href="#${permalink}">${title}</a></h1>`
  }
title2Node
 catchAllCellType textCell
 extends abstractTopLevelNode
 compiler
  stringTemplate <h2>{textCell}</h2>
 crux title2
title3Node
 extends title2Node
 compiler
  stringTemplate <h3>{textCell}</h3>
 crux title3
title4Node
 extends title2Node
 compiler
  stringTemplate <h4>{textCell}</h4>
 crux title4
title5Node
 extends title2Node
 compiler
  stringTemplate <h5>{textCell}</h5>
 crux title5
title6Node
 extends title2Node
 compiler
  stringTemplate <h6>{textCell}</h6>
 crux title6
dateNode
 catchAllCellType dateCell
 extends abstractTopLevelNode
 crux date
 javascript
  compile(spaces) {
   const dayjs = require("dayjs")
   const dateCell = dayjs(this.getContent()).format(`MMMM D, YYYY`)
   return `<div class="scrollArticleDate">${dateCell} â€” </div>`
  }
quickParagraphNode
 catchAllCellType textCell
 compiler
  stringTemplate <p>{textCell}</p>