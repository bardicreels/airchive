anyCell
blankCell
bulletPointCell
 highlightScope keyword
codeCell
 highlightScope comment
commentCell
 highlightScope comment
keywordCell
 highlightScope keyword
textCell
 highlightScope string
permalinkCell
 highlightScope string
urlCell
 highlightScope constant.language
errorNode
 baseNodeType errorNode
scrolldownNode
 extensions scroll
 description A Tree Language that compiles to HTML. An extensible alternative to Markdown.
 root
 inScope abstractTopLevelNode blankLineNode
 catchAllNodeType quickParagraphNode
 compilesTo html
 example
  title Hello world
  title2 This is Scrolldown
  
  paragraph
   It compiles to HTML. Blank lines get turned into brs.
  
  code
   // You can add code as well.
   print("Hello world")
abstractTopLevelNode
 abstract
 cells keywordCell
abstractTopLevelSingleMetaNode
 abstract
 description Use these keywords once per file.
 extends abstractTopLevelNode
paragraphNode
 description Prose content.
 catchAllNodeType paragraphContentNode
 extends abstractTopLevelNode
 crux paragraph
 javascript
  compile() {
   return `<p>${this.childrenToString()}</p>`
  }
paragraphContentNode
 catchAllCellType textCell
codeNode
 description A code block.
 catchAllNodeType lineOfCodeNode
 extends abstractTopLevelNode
 javascript
  compile() {
   return `<code class="scrollCodeBlock">${this.getIndentation() +  this.childrenToString().replace(/\</g, "&lt;")}</code>`
  }
 crux code
codeWithLanguageNode
 description Use this to specify the language of the code block, such as csvCode or rustCode.
 extends codeNode
 pattern ^[a-zA-Z0-9_]+Code$
lineOfCodeNode
 catchAllCellType codeCell
 catchAllNodeType lineOfCodeNode
quoteNode
 description A blockquote.
 catchAllNodeType quoteLineNode
 extends abstractTopLevelNode
 javascript
  compile() {
   return `<blockquote>${this.getIndentation() + this.childrenToString()}</blockquote>`
  }
 crux quote
quoteLineNode
 catchAllCellType anyCell
 catchAllNodeType quoteLineNode
rowNode
 catchAllCellType textCell
 javascript
  toRow(columnCount) {
    const words = this.getWords()
    let str = ""
    let column = 0
    while (column < columnCount) {
      column++
      const content = columnCount === column ? words.slice(columnCount - 1).join(" ") : words[column - 1]
      const linkified = jtree.Utils.linkify(content)
      str += `<td>${linkified}</td>\n`
    }
    return str
  }
tableNode
 crux table
 description Space Separated Values table with linkify. Last column is a catch all.
 catchAllNodeType rowNode
 extends abstractTopLevelNode
 javascript
  get tableHeader() {
    const header = this.nodeAt(0)
    return header ? header.getWords().map(word => `<th>${word}</th>\n`) : []
  }
  getTableBody(columnCount) {
    return this.getTopDownArray().slice(1).map(node => `<tr>${node.toRow(columnCount)}</tr>`).join("\n")
  }
  compile() {
     const tableHeader = this.tableHeader
     return `<table><thead><tr>${tableHeader.join("\n")}</tr></thead>\n<tbody>${this.getTableBody(tableHeader.length)}</tbody></table>`
   }
linkNode
 cells urlCell
 catchAllCellType textCell
 compiler
  stringTemplate <li><a href="{urlCell}">{textCell}</a></li>
linksNode
 catchAllNodeType linkNode
 crux links
 extends abstractTopLevelNode
 compiler
  stringTemplate 
  openChildren <ul>
  closeChildren </ul>
listItemNode
 cells bulletPointCell
 catchAllCellType textCell
 compiler
  stringTemplate <li>{textCell}</li>
listNode
 catchAllNodeType listItemNode
 crux list
 extends abstractTopLevelNode
 compiler
  stringTemplate 
  openChildren <ul>
  closeChildren </ul>
orderedListNode
 description An ordered list.
 extends listNode
 crux orderedList
 compiler
  stringTemplate 
  openChildren <ol>
  closeChildren </ol>
blankLineNode
 description Blank lines compile to nothing in the HTML.
 cells blankCell
 compiler
  stringTemplate 
 pattern ^$
 tags doNotSynthesize
dateCell
 highlightScope string
commentNode
 description Will not appear in the compiled HTML.
 catchAllCellType commentCell
 extends abstractTopLevelNode
 crux comment
 javascript
  compile() {
   return ``
  }
 catchAllNodeType commentLineNode
commentLineNode
 catchAllCellType commentCell
permalinkNode
 description When compiling, Scroll will save this article to {permalink}.html
 crux permalink
 extends abstractTopLevelSingleMetaNode
 cells keywordCell permalinkCell
 compiler
  stringTemplate 
titleNode
 catchAllCellType textCell
 description Title of the article.
 extends abstractTopLevelSingleMetaNode
 compiler
  stringTemplate 
 crux title
 javascript
  compile(spaces) {
   const title = this.getContent()
   const permalink = this.getRootNode().get("permalink") || jtree.Utils.stringToPermalink(this.getContent())
   return `<h1><a href="${permalink}.html">${title}</a></h1>`
  }
abstractTitleNode
 description A subheader.
 catchAllCellType textCell
 extends abstractTopLevelNode
 catchAllNodeType multilineTitleNode
 javascript
  compile() {
   const tag = this.getFirstWord().replace("title", "h")
   const children = this.childrenToString() ? " " + this.childrenToString() : ""
   return `<${tag}>${this.getContent() + children}</${tag}>`
  }
multilineTitleNode
 catchAllCellType textCell
title2Node
 extends abstractTitleNode
 crux title2
title3Node
 extends abstractTitleNode
 crux title3
title4Node
 extends abstractTitleNode
 crux title4
title5Node
 extends abstractTitleNode
 crux title5
title6Node
 extends abstractTitleNode
 crux title6
dateNode
 catchAllCellType dateCell
 description Date the article was first published.
 extends abstractTopLevelSingleMetaNode
 crux date
 javascript
  compile(spaces) {
   const dayjs = require("dayjs")
   const dateCell = dayjs(this.getContent()).format(`MMMM D, YYYY`)
   return `<div class="scrollArticleDate">${dateCell} â€” </div>`
  }
quickParagraphNode
 description A catch all block. This may be removed in future versions.
 catchAllCellType textCell
 compiler
  stringTemplate <p>{textCell}</p>